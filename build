#!node
const meta = require('./meta')
const RSS = require('rss')
const commonmark = require('commonmark')
const ejs = require('ejs')
const fs = require('fs')
const glob = require('glob')
const grayMatter = require('gray-matter')
const path = require('path')
const rimraf = require('rimraf')

rimraf.sync('site')
fs.mkdirSync('site')

glob.sync('static/*').forEach(staticFile => {
  const basename = path.basename(staticFile)
  fs.copyFileSync(staticFile, path.join('site', basename))
})

const templates = {}
glob.sync('templates/*.ejs').forEach(templateFile => {
  const basename = path.basename(templateFile, '.ejs')
  const content = fs.readFileSync(templateFile, 'utf8')
  templates[basename] = ejs.compile(content, {
    filename: templateFile,
    views: [path.resolve('includes')]
  })
})

const posts = {}
const tags = {}

fs.mkdirSync(path.join('site', 'posts'))
const postSources = glob.sync('posts/*.md')
postSources.forEach(postFile => {
  const slug = path.basename(postFile, '.md')
  const read = fs.readFileSync(postFile, 'utf8')
  const { data, content } = grayMatter(read)
  const dateObject = new Date(data.date)
  const dateString = displayDate(dateObject)
  posts[slug] = {
    title: data.title,
    description: data.description,
    dateObject,
    dateString,
    tags: data.tags,
    href: `/posts/${slug}`
  }
  // Index tags.
  data.tags.forEach(tag => {
    if (!tags[tag]) tags[tag] = [slug]
    else tags[tag].push(slug)
  })
  // Write post page.
  fs.writeFileSync(
    path.join('site', 'posts', `${slug}.html`),
    templates.post({
      blogTitle: meta.title,
      title: data.title,
      description: data.description,
      dateObject,
      dateString,
      tags: data.tags.map(text => {
        return {
          text,
          slug: tagToSlug(text),
          href: `/tags/${encodeURIComponent(slug)}`
        }
      }),
      contentHTML: renderMarkdown(content)
    })
  )
})

// Write tags pages.
fs.mkdirSync('site/tags')
Object.keys(tags).forEach(text => {
  const slug = tagToSlug(text)
  fs.writeFileSync(
    path.join('site', 'tags', `${slug}.html`),
    templates.tag({
      blogTitle: meta.title,
      text,
      slug,
      posts: tags[text]
        .map(slug => {
          const record = posts[slug]
          return {
            href: record.href,
            title: record.title,
            description: record.description,
            dateObject: record.dateObject,
            dateString: record.dateString
          }
        })
        .sort(byDateDescending)
    })
  )
})

// Write tags index.
fs.writeFileSync(
  path.join('site', 'tags', 'index.html'),
  templates.tags({
    blogTitle: meta.title,
    tags: Object.keys(tags).map(text => {
      const slug = tagToSlug(text)
      return {
        text,
        slug,
        href: `/tags/${encodeURIComponent(slug)}`
      }
    })
  })
)

const pages = {}

fs.mkdirSync(path.join('site', 'pages'))
const pageSources = glob.sync('pages/*.md')
pageSources.forEach(pageFile => {
  const slug = path.basename(pageFile, '.md')
  const read = fs.readFileSync(pageFile, 'utf8')
  const { data, content } = grayMatter(read)
  const dateObject = new Date(data.date)
  const dateString = displayDate(dateObject)
  pages[slug] = {
    title: data.title,
    description: data.description,
    dateObject,
    dateString,
    href: `/pages/${slug}`
  }
  // Write page.
  fs.writeFileSync(
    path.join('site', 'pages', `${slug}.html`),
    templates.page({
      blogTitle: meta.title,
      title: data.title,
      description: data.description,
      dateObject,
      dateString,
      contentHTML: renderMarkdown(content)
    })
  )
})

// Write index.
fs.writeFileSync(
  path.join('site', 'index.html'),
  templates.index({
    blogTitle: meta.title,
    description: meta.description,
    posts: Object.values(posts).sort(byDateDescending)
  })
)

function byDateDescending (a, b) {
  return Date.parse(b.date) - Date.parse(a.date)
}

function tagToSlug (tag) {
  return tag
    .toLowerCase()
    .replace(/ /, '-')
    .replace(/[^a-zA-Z0-9]/, '')
}

function renderMarkdown (markdown) {
  const reader = new commonmark.Parser({ smart: true })
  const writer = new commonmark.HtmlRenderer()
  const parsed = reader.parse(markdown)
  return writer.render(parsed)
}

const feed = new RSS({
  title: meta.title,
  description: meta.description
})
Object.values(posts)
  .sort(byDateDescending)
  .forEach(post => {
    feed.item({
      title: post.title,
      description: post.description,
      date: post.dateObject.toISOString()
    })
  })
fs.writeFileSync(
  path.join('site', 'feed.xml'),
  feed.xml({ indent: true })
)

function displayDate (date) {
  const months = [
    'January',
    'February',
    'March',
    'Apil',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December'
  ]
  let returned = ''
  returned += months[date.getMonth()]
  returned += ` ${date.getDate()}, `
  returned += date.getFullYear()
  const options = { hour12: false, hour: '2-digit', minute: '2-digit' }
  returned += ` @ ${date.toLocaleTimeString('en-US', options)}`
  return returned
}
