#!node
const AJV = require('ajv').default
const RSS = require('rss')
const ejs = require('ejs')
const fs = require('fs')
const glob = require('glob')
const grayMatter = require('gray-matter')
const hljs = require('highlight.js')
const meta = require('./meta')
const path = require('path')
const rimraf = require('rimraf')
const spawnSync = require('child_process').spawnSync

const ajv = new AJV()
require('ajv-formats')(ajv)

const markdown = require('markdown-it')({
  html: true,
  linkify: false,
  typographer: true,
  highlight: function (string, language) {
    if (language && hljs.getLanguage(language)) {
      try {
        return hljs.highlight(language, string).value
      } catch (error) {
        return ''
      }
    }
    return ''
  }
})

// Remove and recreate web root.
rimraf.sync('site')
fs.mkdirSync('site')

// Copy static files.
glob.sync('static/*').forEach(staticFile => {
  const basename = path.basename(staticFile)
  fs.copyFileSync(staticFile, path.join('site', basename))
})

// Read and compile templates.
const templates = {}
glob.sync('templates/*.ejs').forEach(templateFile => {
  const basename = path.basename(templateFile, '.ejs')
  const content = fs.readFileSync(templateFile, 'utf8')
  templates[basename] = ejs.compile(content, {
    filename: templateFile,
    views: [path.resolve('includes')]
  })
})

// Read and index posts.
const posts = {}
const tags = {}
const series = {}

fs.mkdirSync(path.join('site', 'posts'))

const defaultMetadata = {
  series: null,
  tags: []
}

const validatePost = ajv.compile({
  type: 'object',
  properties: {
    title: { type: 'string', minLength: 1 },
    description: { type: 'string', minLength: 1 },
    series: { type: 'string', minLength: 1 },
    tags: {
      type: 'array',
      items: { type: 'string', minLength: 1 }
    }
  },
  required: ['title', 'description', 'date']
})

glob.sync('posts/*.md').forEach(postFile => {
  const slug = path.basename(postFile, '.md')
  const read = fs.readFileSync(postFile, 'utf8')
  const { data, content } = grayMatter(read)
  const valid = validatePost(data)
  if (!valid) {
    console.error(validatePost.errors)
    throw new Error('invalid metadata: ' + postFile)
  }

  Object.keys(defaultMetadata).forEach(key => {
    if (!data[key]) data[key] = defaultMetadata[key]
  })

  // Save metadata in memory.
  const dateObject = new Date(data.date)
  const dateString = displayDate(dateObject)
  const seriesHREF = data.series
    ? `/series/${toSlug(data.series)}`
    : null
  posts[slug] = {
    title: data.title,
    description: data.description,
    dateObject,
    dateString,
    tags: data.tags,
    series: data.series,
    seriesHREF,
    href: `/posts/${slug}`
  }

  // Index tags.
  data.tags.forEach(tag => index(tags, tag))

  // Index series.
  if (data.series) index(series, data.series)

  function index (object, key) {
    if (!Array.isArray(object[key])) object[key] = [slug]
    else object[key].push(slug)
  }

  // Write post page.
  fs.writeFileSync(
    path.join('site', 'posts', `${slug}.html`),
    templates.post({
      blogTitle: meta.title,
      blogDescription: meta.description,
      socialImage: meta.socialImage,
      title: data.title,
      description: data.description,
      dateObject,
      dateString,
      series: data.series,
      seriesHREF,
      tags: data.tags.map(text => {
        return {
          text,
          slug: toSlug(text),
          href: `/tags/${encodeURIComponent(slug)}`
        }
      }),
      contentHTML: renderMarkdown(content)
    })
  )
})

// Write tag pages.
fs.mkdirSync('site/tags')
Object.keys(tags).forEach(text => {
  const slug = toSlug(text)
  fs.writeFileSync(
    path.join('site', 'tags', `${slug}.html`),
    templates.tag({
      blogTitle: meta.title,
      blogDescription: meta.description,
      socialImage: meta.socialImage,
      title: `Tag: “${text}”`,
      description: 'list of tagged posts',
      text,
      slug,
      posts: tags[text]
        .map(slug => posts[slug])
        .sort(byDateDescending)
    })
  )
})

// Write tag index.
fs.writeFileSync(
  path.join('site', 'tags', 'index.html'),
  templates.tags({
    blogTitle: meta.title,
    blogDescription: meta.description,
    socialImage: meta.socialImage,
    title: 'Tags',
    description: 'list of tags',
    tags: Object.keys(tags).map(text => {
      const slug = toSlug(text)
      return {
        text,
        slug,
        href: `/tags/${encodeURIComponent(slug)}`,
        postCount: tags[text].length
      }
    })
  })
)

if (Object.keys(series).length !== 0) {
  // Write series pages.
  fs.mkdirSync(path.join('site', 'series'))
  Object.keys(series).forEach(text => {
    const slug = toSlug(text)
    fs.writeFileSync(
      path.join('site', 'series', `${slug}.html`),
      templates.series({
        blogTitle: meta.title,
        blogDescription: meta.description,
        socialImage: meta.socialImage,
        title: `Series: “${text}”`,
        description: 'list of posts in series',
        text,
        slug,
        posts: series[text]
          .map(slug => {
            const record = posts[slug]
            return {
              href: record.href,
              title: record.title,
              description: record.description,
              dateObject: record.dateObject,
              dateString: record.dateString
            }
          })
          .sort(byDateDescending)
      })
    )
  })
}

const validatePage = ajv.compile({
  type: 'object',
  properties: {
    title: { type: 'string', minLength: 1 }
  },
  required: ['title']
})

// Render static pages.
fs.mkdirSync(path.join('site', 'pages'))
glob.sync('pages/*.md').forEach(pageFile => {
  const slug = path.basename(pageFile, '.md')
  const read = fs.readFileSync(pageFile, 'utf8')
  const { data, content } = grayMatter(read)
  const valid = validatePage(data)
  if (!valid) {
    console.error(validatePage.errors)
    throw new Error('invalid metadata: ' + pageFile)
  }
  const dateObject = new Date(data.date)
  const dateString = displayDate(dateObject)
  fs.writeFileSync(
    path.join('site', 'pages', `${slug}.html`),
    templates.page({
      blogTitle: meta.title,
      blogDescription: meta.description,
      socialImage: meta.socialImage,
      title: data.title,
      description: data.description,
      dateObject,
      dateString,
      contentHTML: renderMarkdown(content)
    })
  )
})

// Write blog index.
fs.writeFileSync(
  path.join('site', 'index.html'),
  templates.index({
    blogTitle: meta.title,
    blogDescription: meta.description,
    socialImage: meta.socialImage,
    title: meta.title,
    description: meta.description,
    posts: Object.values(posts).sort(byDateDescending)
  })
)

// Write Atom/RSS feed.
const feed = new RSS({
  title: meta.title,
  description: meta.description,
  site_url: meta.url,
  feed_url: meta.url + '/feed.xml',
  language: 'en',
  generator: 'miniblog'
})

Object.values(posts)
  .sort(byDateDescending)
  .forEach(post => {
    feed.item({
      title: post.title,
      description: post.description,
      date: post.dateObject.toISOString(),
      url: meta.url + post.href
    })
  })

fs.writeFileSync(
  path.join('site', 'feed.xml'),
  feed.xml({ indent: true })
)

// Format pages.
const tidyArguments = ['-indent', '--indent-spaces', '2', '--tidy-mark', 'no', '--wrap', '0', '-modify']
glob.sync('site/**/*.html').forEach(file => {
  spawnSync('tidy', tidyArguments.concat(file))
})

// Helper Functions

function renderMarkdown (input) {
  return markdown.render(input)
}

function displayDate (date) {
  const months = [
    'January',
    'February',
    'March',
    'Apil',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December'
  ]
  let returned = ''
  returned += months[date.getMonth()]
  returned += ` ${date.getDate()}, `
  returned += date.getFullYear()
  const options = { hour12: false, hour: '2-digit', minute: '2-digit' }
  returned += ` @ ${date.toLocaleTimeString('en-US', options)}`
  return returned
}

// Sort posts in reverse chronological order.
function byDateDescending (a, b) {
  return b.dateObject - a.dateObject
}

function toSlug (tag) {
  return tag
    .toLowerCase()
    .replace(/ /g, '-')
    .replace(/[^a-z0-9-]/g, '')
}
